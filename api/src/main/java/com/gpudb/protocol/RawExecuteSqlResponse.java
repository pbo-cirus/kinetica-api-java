/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

import java.nio.ByteBuffer;
import java.util.LinkedHashMap;
import java.util.Map;


/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#executeSqlRaw(ExecuteSqlRequest)}.
 */
public class RawExecuteSqlResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("RawExecuteSqlResponse")
            .namespace("com.gpudb")
            .fields()
            .name("countAffected").type().longType().noDefault()
            .name("responseSchemaStr").type().stringType().noDefault()
            .name("binaryEncodedResponse").type().bytesType().noDefault()
            .name("jsonEncodedResponse").type().stringType().noDefault()
            .name("totalNumberOfRecords").type().longType().noDefault()
            .name("hasMoreRecords").type().booleanType().noDefault()
            .name("pagingTable").type().stringType().noDefault()
            .name("info").type().map().values().stringType().noDefault()
            .endRecord();
    private long countAffected;
    private String responseSchemaStr;
    private ByteBuffer binaryEncodedResponse;
    private String jsonEncodedResponse;
    private long totalNumberOfRecords;
    private boolean hasMoreRecords;
    private String pagingTable;
    private Map<String, String> info;
    /**
     * Constructs a RawExecuteSqlResponse object with default parameters.
     */
    public RawExecuteSqlResponse() {
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return the schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * @return The number of objects/records affected.
     */
    public long getCountAffected() {
        return countAffected;
    }

    /**
     * @param countAffected The number of objects/records affected.
     * @return {@code this} to mimic the builder pattern.
     */
    public RawExecuteSqlResponse setCountAffected(long countAffected) {
        this.countAffected = countAffected;
        return this;
    }

    /**
     * @return Avro schema of {@code binaryEncodedResponse} or {@code
     * jsonEncodedResponse}.
     */
    public String getResponseSchemaStr() {
        return responseSchemaStr;
    }

    /**
     * @param responseSchemaStr Avro schema of {@code binaryEncodedResponse}
     *                          or {@code jsonEncodedResponse}.
     * @return {@code this} to mimic the builder pattern.
     */
    public RawExecuteSqlResponse setResponseSchemaStr(String responseSchemaStr) {
        this.responseSchemaStr = (responseSchemaStr == null) ? "" : responseSchemaStr;
        return this;
    }

    /**
     * @return Avro binary encoded response.
     */
    public ByteBuffer getBinaryEncodedResponse() {
        return binaryEncodedResponse;
    }

    /**
     * @param binaryEncodedResponse Avro binary encoded response.
     * @return {@code this} to mimic the builder pattern.
     */
    public RawExecuteSqlResponse setBinaryEncodedResponse(ByteBuffer binaryEncodedResponse) {
        this.binaryEncodedResponse = (binaryEncodedResponse == null) ? ByteBuffer.wrap(new byte[0]) : binaryEncodedResponse;
        return this;
    }

    /**
     * @return Avro JSON encoded response.
     */
    public String getJsonEncodedResponse() {
        return jsonEncodedResponse;
    }

    /**
     * @param jsonEncodedResponse Avro JSON encoded response.
     * @return {@code this} to mimic the builder pattern.
     */
    public RawExecuteSqlResponse setJsonEncodedResponse(String jsonEncodedResponse) {
        this.jsonEncodedResponse = (jsonEncodedResponse == null) ? "" : jsonEncodedResponse;
        return this;
    }

    /**
     * @return Total/Filtered number of records.
     */
    public long getTotalNumberOfRecords() {
        return totalNumberOfRecords;
    }

    /**
     * @param totalNumberOfRecords Total/Filtered number of records.
     * @return {@code this} to mimic the builder pattern.
     */
    public RawExecuteSqlResponse setTotalNumberOfRecords(long totalNumberOfRecords) {
        this.totalNumberOfRecords = totalNumberOfRecords;
        return this;
    }

    /**
     * @return Too many records. Returned a partial set.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.RawExecuteSqlResponse.HasMoreRecords#TRUE
     * TRUE}
     *         <li> {@link
     * com.gpudb.protocol.RawExecuteSqlResponse.HasMoreRecords#FALSE
     * FALSE}
     * </ul>
     */
    public boolean getHasMoreRecords() {
        return hasMoreRecords;
    }

    /**
     * @param hasMoreRecords Too many records. Returned a partial set.
     *                       Supported values:
     *                       <ul>
     *                               <li> {@link
     *                       com.gpudb.protocol.RawExecuteSqlResponse.HasMoreRecords#TRUE
     *                       TRUE}
     *                               <li> {@link
     *                       com.gpudb.protocol.RawExecuteSqlResponse.HasMoreRecords#FALSE
     *                       FALSE}
     *                       </ul>
     * @return {@code this} to mimic the builder pattern.
     */
    public RawExecuteSqlResponse setHasMoreRecords(boolean hasMoreRecords) {
        this.hasMoreRecords = hasMoreRecords;
        return this;
    }

    /**
     * @return Name of the table that has the result records of the query.
     * Valid, when {@code hasMoreRecords} is {@code true} (Subject to
     * config.paging_tables_enabled)
     */
    public String getPagingTable() {
        return pagingTable;
    }

    /**
     * @param pagingTable Name of the table that has the result records of the
     *                    query. Valid, when {@code hasMoreRecords} is {@code
     *                    true} (Subject to config.paging_tables_enabled)
     * @return {@code this} to mimic the builder pattern.
     */
    public RawExecuteSqlResponse setPagingTable(String pagingTable) {
        this.pagingTable = (pagingTable == null) ? "" : pagingTable;
        return this;
    }

    /**
     * @return Additional information.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.RawExecuteSqlResponse.Info#COUNT COUNT}:
     * Number of records in the final table
     * </ul>
     * The default value is an empty {@link Map}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * @param info Additional information.
     *             <ul>
     *                     <li> {@link
     *             com.gpudb.protocol.RawExecuteSqlResponse.Info#COUNT COUNT}:
     *             Number of records in the final table
     *             </ul>
     *             The default value is an empty {@link Map}.
     * @return {@code this} to mimic the builder pattern.
     */
    public RawExecuteSqlResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return the schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index the position of the field to get
     * @return value of the field with the given index.
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.countAffected;

            case 1:
                return this.responseSchemaStr;

            case 2:
                return this.binaryEncodedResponse;

            case 3:
                return this.jsonEncodedResponse;

            case 4:
                return this.totalNumberOfRecords;

            case 5:
                return this.hasMoreRecords;

            case 6:
                return this.pagingTable;

            case 7:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index the position of the field to set
     * @param value the value to set
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.countAffected = (Long) value;
                break;

            case 1:
                this.responseSchemaStr = (String) value;
                break;

            case 2:
                this.binaryEncodedResponse = (ByteBuffer) value;
                break;

            case 3:
                this.jsonEncodedResponse = (String) value;
                break;

            case 4:
                this.totalNumberOfRecords = (Long) value;
                break;

            case 5:
                this.hasMoreRecords = (Boolean) value;
                break;

            case 6:
                this.pagingTable = (String) value;
                break;

            case 7:
                this.info = (Map<String, String>) value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if ((obj == null) || (obj.getClass() != this.getClass())) {
            return false;
        }

        RawExecuteSqlResponse that = (RawExecuteSqlResponse) obj;

        return ((this.countAffected == that.countAffected)
                && this.responseSchemaStr.equals(that.responseSchemaStr)
                && this.binaryEncodedResponse.equals(that.binaryEncodedResponse)
                && this.jsonEncodedResponse.equals(that.jsonEncodedResponse)
                && (this.totalNumberOfRecords == that.totalNumberOfRecords)
                && (this.hasMoreRecords == that.hasMoreRecords)
                && this.pagingTable.equals(that.pagingTable)
                && this.info.equals(that.info));
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append("{");
        builder.append(gd.toString("countAffected"));
        builder.append(": ");
        builder.append(gd.toString(this.countAffected));
        builder.append(", ");
        builder.append(gd.toString("responseSchemaStr"));
        builder.append(": ");
        builder.append(gd.toString(this.responseSchemaStr));
        builder.append(", ");
        builder.append(gd.toString("binaryEncodedResponse"));
        builder.append(": ");
        builder.append(gd.toString(this.binaryEncodedResponse));
        builder.append(", ");
        builder.append(gd.toString("jsonEncodedResponse"));
        builder.append(": ");
        builder.append(gd.toString(this.jsonEncodedResponse));
        builder.append(", ");
        builder.append(gd.toString("totalNumberOfRecords"));
        builder.append(": ");
        builder.append(gd.toString(this.totalNumberOfRecords));
        builder.append(", ");
        builder.append(gd.toString("hasMoreRecords"));
        builder.append(": ");
        builder.append(gd.toString(this.hasMoreRecords));
        builder.append(", ");
        builder.append(gd.toString("pagingTable"));
        builder.append(": ");
        builder.append(gd.toString(this.pagingTable));
        builder.append(", ");
        builder.append(gd.toString("info"));
        builder.append(": ");
        builder.append(gd.toString(this.info));
        builder.append("}");

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + ((Long) this.countAffected).hashCode();
        hashCode = (31 * hashCode) + this.responseSchemaStr.hashCode();
        hashCode = (31 * hashCode) + this.binaryEncodedResponse.hashCode();
        hashCode = (31 * hashCode) + this.jsonEncodedResponse.hashCode();
        hashCode = (31 * hashCode) + ((Long) this.totalNumberOfRecords).hashCode();
        hashCode = (31 * hashCode) + ((Boolean) this.hasMoreRecords).hashCode();
        hashCode = (31 * hashCode) + this.pagingTable.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }

    /**
     * Too many records. Returned a partial set.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.RawExecuteSqlResponse.HasMoreRecords#TRUE TRUE}
     *         <li> {@link
     * com.gpudb.protocol.RawExecuteSqlResponse.HasMoreRecords#FALSE FALSE}
     * </ul>
     * A set of string constants for the parameter {@code hasMoreRecords}.
     */
    public static final class HasMoreRecords {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private HasMoreRecords() {
        }
    }

    /**
     * Additional information.
     * <ul>
     *         <li> {@link com.gpudb.protocol.RawExecuteSqlResponse.Info#COUNT
     * COUNT}: Number of records in the final table
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code info}.
     */
    public static final class Info {

        /**
         * Number of records in the final table
         */
        public static final String COUNT = "count";

        private Info() {
        }
    }

}
