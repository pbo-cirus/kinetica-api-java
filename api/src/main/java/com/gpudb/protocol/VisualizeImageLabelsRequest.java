
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

import java.util.LinkedHashMap;
import java.util.Map;


public class VisualizeImageLabelsRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeImageLabelsRequest")
            .namespace("com.gpudb")
            .fields()
            .name("tableName").type().stringType().noDefault()
            .name("xColumnName").type().stringType().noDefault()
            .name("yColumnName").type().stringType().noDefault()
            .name("xOffset").type().stringType().noDefault()
            .name("yOffset").type().stringType().noDefault()
            .name("textString").type().stringType().noDefault()
            .name("font").type().stringType().noDefault()
            .name("textColor").type().stringType().noDefault()
            .name("textAngle").type().stringType().noDefault()
            .name("textScale").type().stringType().noDefault()
            .name("drawBox").type().stringType().noDefault()
            .name("drawLeader").type().stringType().noDefault()
            .name("lineWidth").type().stringType().noDefault()
            .name("lineColor").type().stringType().noDefault()
            .name("fillColor").type().stringType().noDefault()
            .name("leaderXColumnName").type().stringType().noDefault()
            .name("leaderYColumnName").type().stringType().noDefault()
            .name("filter").type().stringType().noDefault()
            .name("minX").type().doubleType().noDefault()
            .name("maxX").type().doubleType().noDefault()
            .name("minY").type().doubleType().noDefault()
            .name("maxY").type().doubleType().noDefault()
            .name("width").type().intType().noDefault()
            .name("height").type().intType().noDefault()
            .name("projection").type().stringType().noDefault()
            .name("options").type().map().values().stringType().noDefault()
            .endRecord();
    private String tableName;
    private String xColumnName;
    private String yColumnName;
    private String xOffset;
    private String yOffset;
    private String textString;
    private String font;
    private String textColor;
    private String textAngle;
    private String textScale;
    private String drawBox;
    private String drawLeader;
    private String lineWidth;
    private String lineColor;
    private String fillColor;
    private String leaderXColumnName;
    private String leaderYColumnName;
    private String filter;
    private double minX;
    private double maxX;
    private double minY;
    private double maxY;
    private int width;
    private int height;
    private String projection;
    private Map<String, String> options;
    public VisualizeImageLabelsRequest() {
        tableName = "";
        xColumnName = "";
        yColumnName = "";
        xOffset = "";
        yOffset = "";
        textString = "";
        font = "";
        textColor = "";
        textAngle = "";
        textScale = "";
        drawBox = "";
        drawLeader = "";
        lineWidth = "";
        lineColor = "";
        fillColor = "";
        leaderXColumnName = "";
        leaderYColumnName = "";
        filter = "";
        projection = "";
        options = new LinkedHashMap<>();
    }
    public VisualizeImageLabelsRequest(String tableName, String xColumnName, String yColumnName, String xOffset, String yOffset, String textString, String font, String textColor, String textAngle, String textScale, String drawBox, String drawLeader, String lineWidth, String lineColor, String fillColor, String leaderXColumnName, String leaderYColumnName, String filter, double minX, double maxX, double minY, double maxY, int width, int height, String projection, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.xColumnName = (xColumnName == null) ? "" : xColumnName;
        this.yColumnName = (yColumnName == null) ? "" : yColumnName;
        this.xOffset = (xOffset == null) ? "" : xOffset;
        this.yOffset = (yOffset == null) ? "" : yOffset;
        this.textString = (textString == null) ? "" : textString;
        this.font = (font == null) ? "" : font;
        this.textColor = (textColor == null) ? "" : textColor;
        this.textAngle = (textAngle == null) ? "" : textAngle;
        this.textScale = (textScale == null) ? "" : textScale;
        this.drawBox = (drawBox == null) ? "" : drawBox;
        this.drawLeader = (drawLeader == null) ? "" : drawLeader;
        this.lineWidth = (lineWidth == null) ? "" : lineWidth;
        this.lineColor = (lineColor == null) ? "" : lineColor;
        this.fillColor = (fillColor == null) ? "" : fillColor;
        this.leaderXColumnName = (leaderXColumnName == null) ? "" : leaderXColumnName;
        this.leaderYColumnName = (leaderYColumnName == null) ? "" : leaderYColumnName;
        this.filter = (filter == null) ? "" : filter;
        this.minX = minX;
        this.maxX = maxX;
        this.minY = minY;
        this.maxY = maxY;
        this.width = width;
        this.height = height;
        this.projection = (projection == null) ? "" : projection;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public static Schema getClassSchema() {
        return schema$;
    }

    public String getTableName() {
        return tableName;
    }

    public VisualizeImageLabelsRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    public String getXColumnName() {
        return xColumnName;
    }

    public VisualizeImageLabelsRequest setXColumnName(String xColumnName) {
        this.xColumnName = (xColumnName == null) ? "" : xColumnName;
        return this;
    }

    public String getYColumnName() {
        return yColumnName;
    }

    public VisualizeImageLabelsRequest setYColumnName(String yColumnName) {
        this.yColumnName = (yColumnName == null) ? "" : yColumnName;
        return this;
    }

    public String getXOffset() {
        return xOffset;
    }

    public VisualizeImageLabelsRequest setXOffset(String xOffset) {
        this.xOffset = (xOffset == null) ? "" : xOffset;
        return this;
    }

    public String getYOffset() {
        return yOffset;
    }

    public VisualizeImageLabelsRequest setYOffset(String yOffset) {
        this.yOffset = (yOffset == null) ? "" : yOffset;
        return this;
    }

    public String getTextString() {
        return textString;
    }

    public VisualizeImageLabelsRequest setTextString(String textString) {
        this.textString = (textString == null) ? "" : textString;
        return this;
    }

    public String getFont() {
        return font;
    }

    public VisualizeImageLabelsRequest setFont(String font) {
        this.font = (font == null) ? "" : font;
        return this;
    }

    public String getTextColor() {
        return textColor;
    }

    public VisualizeImageLabelsRequest setTextColor(String textColor) {
        this.textColor = (textColor == null) ? "" : textColor;
        return this;
    }

    public String getTextAngle() {
        return textAngle;
    }

    public VisualizeImageLabelsRequest setTextAngle(String textAngle) {
        this.textAngle = (textAngle == null) ? "" : textAngle;
        return this;
    }

    public String getTextScale() {
        return textScale;
    }

    public VisualizeImageLabelsRequest setTextScale(String textScale) {
        this.textScale = (textScale == null) ? "" : textScale;
        return this;
    }

    public String getDrawBox() {
        return drawBox;
    }

    public VisualizeImageLabelsRequest setDrawBox(String drawBox) {
        this.drawBox = (drawBox == null) ? "" : drawBox;
        return this;
    }

    public String getDrawLeader() {
        return drawLeader;
    }

    public VisualizeImageLabelsRequest setDrawLeader(String drawLeader) {
        this.drawLeader = (drawLeader == null) ? "" : drawLeader;
        return this;
    }

    public String getLineWidth() {
        return lineWidth;
    }

    public VisualizeImageLabelsRequest setLineWidth(String lineWidth) {
        this.lineWidth = (lineWidth == null) ? "" : lineWidth;
        return this;
    }

    public String getLineColor() {
        return lineColor;
    }

    public VisualizeImageLabelsRequest setLineColor(String lineColor) {
        this.lineColor = (lineColor == null) ? "" : lineColor;
        return this;
    }

    public String getFillColor() {
        return fillColor;
    }

    public VisualizeImageLabelsRequest setFillColor(String fillColor) {
        this.fillColor = (fillColor == null) ? "" : fillColor;
        return this;
    }

    public String getLeaderXColumnName() {
        return leaderXColumnName;
    }

    public VisualizeImageLabelsRequest setLeaderXColumnName(String leaderXColumnName) {
        this.leaderXColumnName = (leaderXColumnName == null) ? "" : leaderXColumnName;
        return this;
    }

    public String getLeaderYColumnName() {
        return leaderYColumnName;
    }

    public VisualizeImageLabelsRequest setLeaderYColumnName(String leaderYColumnName) {
        this.leaderYColumnName = (leaderYColumnName == null) ? "" : leaderYColumnName;
        return this;
    }

    public String getFilter() {
        return filter;
    }

    public VisualizeImageLabelsRequest setFilter(String filter) {
        this.filter = (filter == null) ? "" : filter;
        return this;
    }

    public double getMinX() {
        return minX;
    }

    public VisualizeImageLabelsRequest setMinX(double minX) {
        this.minX = minX;
        return this;
    }

    public double getMaxX() {
        return maxX;
    }

    public VisualizeImageLabelsRequest setMaxX(double maxX) {
        this.maxX = maxX;
        return this;
    }

    public double getMinY() {
        return minY;
    }

    public VisualizeImageLabelsRequest setMinY(double minY) {
        this.minY = minY;
        return this;
    }

    public double getMaxY() {
        return maxY;
    }

    public VisualizeImageLabelsRequest setMaxY(double maxY) {
        this.maxY = maxY;
        return this;
    }

    public int getWidth() {
        return width;
    }

    public VisualizeImageLabelsRequest setWidth(int width) {
        this.width = width;
        return this;
    }

    public int getHeight() {
        return height;
    }

    public VisualizeImageLabelsRequest setHeight(int height) {
        this.height = height;
        return this;
    }

    public String getProjection() {
        return projection;
    }

    public VisualizeImageLabelsRequest setProjection(String projection) {
        this.projection = (projection == null) ? "" : projection;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public VisualizeImageLabelsRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.xColumnName;

            case 2:
                return this.yColumnName;

            case 3:
                return this.xOffset;

            case 4:
                return this.yOffset;

            case 5:
                return this.textString;

            case 6:
                return this.font;

            case 7:
                return this.textColor;

            case 8:
                return this.textAngle;

            case 9:
                return this.textScale;

            case 10:
                return this.drawBox;

            case 11:
                return this.drawLeader;

            case 12:
                return this.lineWidth;

            case 13:
                return this.lineColor;

            case 14:
                return this.fillColor;

            case 15:
                return this.leaderXColumnName;

            case 16:
                return this.leaderYColumnName;

            case 17:
                return this.filter;

            case 18:
                return this.minX;

            case 19:
                return this.maxX;

            case 20:
                return this.minY;

            case 21:
                return this.maxY;

            case 22:
                return this.width;

            case 23:
                return this.height;

            case 24:
                return this.projection;

            case 25:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String) value;
                break;

            case 1:
                this.xColumnName = (String) value;
                break;

            case 2:
                this.yColumnName = (String) value;
                break;

            case 3:
                this.xOffset = (String) value;
                break;

            case 4:
                this.yOffset = (String) value;
                break;

            case 5:
                this.textString = (String) value;
                break;

            case 6:
                this.font = (String) value;
                break;

            case 7:
                this.textColor = (String) value;
                break;

            case 8:
                this.textAngle = (String) value;
                break;

            case 9:
                this.textScale = (String) value;
                break;

            case 10:
                this.drawBox = (String) value;
                break;

            case 11:
                this.drawLeader = (String) value;
                break;

            case 12:
                this.lineWidth = (String) value;
                break;

            case 13:
                this.lineColor = (String) value;
                break;

            case 14:
                this.fillColor = (String) value;
                break;

            case 15:
                this.leaderXColumnName = (String) value;
                break;

            case 16:
                this.leaderYColumnName = (String) value;
                break;

            case 17:
                this.filter = (String) value;
                break;

            case 18:
                this.minX = (Double) value;
                break;

            case 19:
                this.maxX = (Double) value;
                break;

            case 20:
                this.minY = (Double) value;
                break;

            case 21:
                this.maxY = (Double) value;
                break;

            case 22:
                this.width = (Integer) value;
                break;

            case 23:
                this.height = (Integer) value;
                break;

            case 24:
                this.projection = (String) value;
                break;

            case 25:
                this.options = (Map<String, String>) value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if ((obj == null) || (obj.getClass() != this.getClass())) {
            return false;
        }

        VisualizeImageLabelsRequest that = (VisualizeImageLabelsRequest) obj;

        return (this.tableName.equals(that.tableName)
                && this.xColumnName.equals(that.xColumnName)
                && this.yColumnName.equals(that.yColumnName)
                && this.xOffset.equals(that.xOffset)
                && this.yOffset.equals(that.yOffset)
                && this.textString.equals(that.textString)
                && this.font.equals(that.font)
                && this.textColor.equals(that.textColor)
                && this.textAngle.equals(that.textAngle)
                && this.textScale.equals(that.textScale)
                && this.drawBox.equals(that.drawBox)
                && this.drawLeader.equals(that.drawLeader)
                && this.lineWidth.equals(that.lineWidth)
                && this.lineColor.equals(that.lineColor)
                && this.fillColor.equals(that.fillColor)
                && this.leaderXColumnName.equals(that.leaderXColumnName)
                && this.leaderYColumnName.equals(that.leaderYColumnName)
                && this.filter.equals(that.filter)
                && ((Double) this.minX).equals((Double) that.minX)
                && ((Double) this.maxX).equals((Double) that.maxX)
                && ((Double) this.minY).equals((Double) that.minY)
                && ((Double) this.maxY).equals((Double) that.maxY)
                && (this.width == that.width)
                && (this.height == that.height)
                && this.projection.equals(that.projection)
                && this.options.equals(that.options));
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append("{");
        builder.append(gd.toString("tableName"));
        builder.append(": ");
        builder.append(gd.toString(this.tableName));
        builder.append(", ");
        builder.append(gd.toString("xColumnName"));
        builder.append(": ");
        builder.append(gd.toString(this.xColumnName));
        builder.append(", ");
        builder.append(gd.toString("yColumnName"));
        builder.append(": ");
        builder.append(gd.toString(this.yColumnName));
        builder.append(", ");
        builder.append(gd.toString("xOffset"));
        builder.append(": ");
        builder.append(gd.toString(this.xOffset));
        builder.append(", ");
        builder.append(gd.toString("yOffset"));
        builder.append(": ");
        builder.append(gd.toString(this.yOffset));
        builder.append(", ");
        builder.append(gd.toString("textString"));
        builder.append(": ");
        builder.append(gd.toString(this.textString));
        builder.append(", ");
        builder.append(gd.toString("font"));
        builder.append(": ");
        builder.append(gd.toString(this.font));
        builder.append(", ");
        builder.append(gd.toString("textColor"));
        builder.append(": ");
        builder.append(gd.toString(this.textColor));
        builder.append(", ");
        builder.append(gd.toString("textAngle"));
        builder.append(": ");
        builder.append(gd.toString(this.textAngle));
        builder.append(", ");
        builder.append(gd.toString("textScale"));
        builder.append(": ");
        builder.append(gd.toString(this.textScale));
        builder.append(", ");
        builder.append(gd.toString("drawBox"));
        builder.append(": ");
        builder.append(gd.toString(this.drawBox));
        builder.append(", ");
        builder.append(gd.toString("drawLeader"));
        builder.append(": ");
        builder.append(gd.toString(this.drawLeader));
        builder.append(", ");
        builder.append(gd.toString("lineWidth"));
        builder.append(": ");
        builder.append(gd.toString(this.lineWidth));
        builder.append(", ");
        builder.append(gd.toString("lineColor"));
        builder.append(": ");
        builder.append(gd.toString(this.lineColor));
        builder.append(", ");
        builder.append(gd.toString("fillColor"));
        builder.append(": ");
        builder.append(gd.toString(this.fillColor));
        builder.append(", ");
        builder.append(gd.toString("leaderXColumnName"));
        builder.append(": ");
        builder.append(gd.toString(this.leaderXColumnName));
        builder.append(", ");
        builder.append(gd.toString("leaderYColumnName"));
        builder.append(": ");
        builder.append(gd.toString(this.leaderYColumnName));
        builder.append(", ");
        builder.append(gd.toString("filter"));
        builder.append(": ");
        builder.append(gd.toString(this.filter));
        builder.append(", ");
        builder.append(gd.toString("minX"));
        builder.append(": ");
        builder.append(gd.toString(this.minX));
        builder.append(", ");
        builder.append(gd.toString("maxX"));
        builder.append(": ");
        builder.append(gd.toString(this.maxX));
        builder.append(", ");
        builder.append(gd.toString("minY"));
        builder.append(": ");
        builder.append(gd.toString(this.minY));
        builder.append(", ");
        builder.append(gd.toString("maxY"));
        builder.append(": ");
        builder.append(gd.toString(this.maxY));
        builder.append(", ");
        builder.append(gd.toString("width"));
        builder.append(": ");
        builder.append(gd.toString(this.width));
        builder.append(", ");
        builder.append(gd.toString("height"));
        builder.append(": ");
        builder.append(gd.toString(this.height));
        builder.append(", ");
        builder.append(gd.toString("projection"));
        builder.append(": ");
        builder.append(gd.toString(this.projection));
        builder.append(", ");
        builder.append(gd.toString("options"));
        builder.append(": ");
        builder.append(gd.toString(this.options));
        builder.append("}");

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.xColumnName.hashCode();
        hashCode = (31 * hashCode) + this.yColumnName.hashCode();
        hashCode = (31 * hashCode) + this.xOffset.hashCode();
        hashCode = (31 * hashCode) + this.yOffset.hashCode();
        hashCode = (31 * hashCode) + this.textString.hashCode();
        hashCode = (31 * hashCode) + this.font.hashCode();
        hashCode = (31 * hashCode) + this.textColor.hashCode();
        hashCode = (31 * hashCode) + this.textAngle.hashCode();
        hashCode = (31 * hashCode) + this.textScale.hashCode();
        hashCode = (31 * hashCode) + this.drawBox.hashCode();
        hashCode = (31 * hashCode) + this.drawLeader.hashCode();
        hashCode = (31 * hashCode) + this.lineWidth.hashCode();
        hashCode = (31 * hashCode) + this.lineColor.hashCode();
        hashCode = (31 * hashCode) + this.fillColor.hashCode();
        hashCode = (31 * hashCode) + this.leaderXColumnName.hashCode();
        hashCode = (31 * hashCode) + this.leaderYColumnName.hashCode();
        hashCode = (31 * hashCode) + this.filter.hashCode();
        hashCode = (31 * hashCode) + ((Double) this.minX).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.maxX).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.minY).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.maxY).hashCode();
        hashCode = (31 * hashCode) + this.width;
        hashCode = (31 * hashCode) + this.height;
        hashCode = (31 * hashCode) + this.projection.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

    public static final class Projection {

        public static final String EPSG_4326 = "EPSG:4326";

        public static final String PLATE_CARREE = "PLATE_CARREE";

        public static final String _900913 = "900913";

        public static final String EPSG_900913 = "EPSG:900913";

        public static final String _102100 = "102100";

        public static final String EPSG_102100 = "EPSG:102100";

        public static final String _3857 = "3857";

        public static final String EPSG_3857 = "EPSG:3857";

        public static final String WEB_MERCATOR = "WEB_MERCATOR";


        private Projection() {
        }
    }


}
