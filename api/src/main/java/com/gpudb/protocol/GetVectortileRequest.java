
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;


public class GetVectortileRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("GetVectortileRequest")
            .namespace("com.gpudb")
            .fields()
            .name("tableNames").type().array().items().stringType().noDefault()
            .name("columnNames").type().array().items().stringType().noDefault()
            .name("layers").type().map().values().array().items().stringType().noDefault()
            .name("tileX").type().intType().noDefault()
            .name("tileY").type().intType().noDefault()
            .name("zoom").type().intType().noDefault()
            .name("options").type().map().values().stringType().noDefault()
            .endRecord();
    private List<String> tableNames;
    private List<String> columnNames;
    private Map<String, List<String>> layers;
    private int tileX;
    private int tileY;
    private int zoom;
    private Map<String, String> options;
    public GetVectortileRequest() {
        tableNames = new ArrayList<>();
        columnNames = new ArrayList<>();
        layers = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }


    public GetVectortileRequest(List<String> tableNames, List<String> columnNames, Map<String, List<String>> layers, int tileX, int tileY, int zoom, Map<String, String> options) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        this.layers = (layers == null) ? new LinkedHashMap<String, List<String>>() : layers;
        this.tileX = tileX;
        this.tileY = tileY;
        this.zoom = zoom;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public static Schema getClassSchema() {
        return schema$;
    }

    public List<String> getTableNames() {
        return tableNames;
    }

    public GetVectortileRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    public List<String> getColumnNames() {
        return columnNames;
    }

    public GetVectortileRequest setColumnNames(List<String> columnNames) {
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        return this;
    }

    public Map<String, List<String>> getLayers() {
        return layers;
    }

    public GetVectortileRequest setLayers(Map<String, List<String>> layers) {
        this.layers = (layers == null) ? new LinkedHashMap<String, List<String>>() : layers;
        return this;
    }

    public int getTileX() {
        return tileX;
    }

    public GetVectortileRequest setTileX(int tileX) {
        this.tileX = tileX;
        return this;
    }

    public int getTileY() {
        return tileY;
    }

    public GetVectortileRequest setTileY(int tileY) {
        this.tileY = tileY;
        return this;
    }

    public int getZoom() {
        return zoom;
    }

    public GetVectortileRequest setZoom(int zoom) {
        this.zoom = zoom;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public GetVectortileRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableNames;

            case 1:
                return this.columnNames;

            case 2:
                return this.layers;

            case 3:
                return this.tileX;

            case 4:
                return this.tileY;

            case 5:
                return this.zoom;

            case 6:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableNames = (List<String>) value;
                break;

            case 1:
                this.columnNames = (List<String>) value;
                break;

            case 2:
                this.layers = (Map<String, List<String>>) value;
                break;

            case 3:
                this.tileX = (Integer) value;
                break;

            case 4:
                this.tileY = (Integer) value;
                break;

            case 5:
                this.zoom = (Integer) value;
                break;

            case 6:
                this.options = (Map<String, String>) value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if ((obj == null) || (obj.getClass() != this.getClass())) {
            return false;
        }

        GetVectortileRequest that = (GetVectortileRequest) obj;

        return (this.tableNames.equals(that.tableNames)
                && this.columnNames.equals(that.columnNames)
                && this.layers.equals(that.layers)
                && (this.tileX == that.tileX)
                && (this.tileY == that.tileY)
                && (this.zoom == that.zoom)
                && this.options.equals(that.options));
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append("{");
        builder.append(gd.toString("tableNames"));
        builder.append(": ");
        builder.append(gd.toString(this.tableNames));
        builder.append(", ");
        builder.append(gd.toString("columnNames"));
        builder.append(": ");
        builder.append(gd.toString(this.columnNames));
        builder.append(", ");
        builder.append(gd.toString("layers"));
        builder.append(": ");
        builder.append(gd.toString(this.layers));
        builder.append(", ");
        builder.append(gd.toString("tileX"));
        builder.append(": ");
        builder.append(gd.toString(this.tileX));
        builder.append(", ");
        builder.append(gd.toString("tileY"));
        builder.append(": ");
        builder.append(gd.toString(this.tileY));
        builder.append(", ");
        builder.append(gd.toString("zoom"));
        builder.append(": ");
        builder.append(gd.toString(this.zoom));
        builder.append(", ");
        builder.append(gd.toString("options"));
        builder.append(": ");
        builder.append(gd.toString(this.options));
        builder.append("}");

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.columnNames.hashCode();
        hashCode = (31 * hashCode) + this.layers.hashCode();
        hashCode = (31 * hashCode) + this.tileX;
        hashCode = (31 * hashCode) + this.tileY;
        hashCode = (31 * hashCode) + this.zoom;
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }


}
