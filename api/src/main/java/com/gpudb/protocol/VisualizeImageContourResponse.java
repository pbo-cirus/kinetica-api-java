
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

import java.nio.ByteBuffer;
import java.util.LinkedHashMap;
import java.util.Map;


public class VisualizeImageContourResponse implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeImageContourResponse")
            .namespace("com.gpudb")
            .fields()
            .name("width").type().intType().noDefault()
            .name("height").type().intType().noDefault()
            .name("bgColor").type().longType().noDefault()
            .name("imageData").type().bytesType().noDefault()
            .name("gridData").type().bytesType().noDefault()
            .name("fillN0").type().doubleType().noDefault()
            .name("fillNn").type().doubleType().noDefault()
            .name("minLevel").type().doubleType().noDefault()
            .name("maxLevel").type().doubleType().noDefault()
            .name("samplesUsed").type().longType().noDefault()
            .name("info").type().map().values().stringType().noDefault()
            .endRecord();
    private int width;
    private int height;
    private long bgColor;
    private ByteBuffer imageData;
    private ByteBuffer gridData;
    private double fillN0;
    private double fillNn;
    private double minLevel;
    private double maxLevel;
    private long samplesUsed;
    private Map<String, String> info;
    public VisualizeImageContourResponse() {
    }

    public static Schema getClassSchema() {
        return schema$;
    }

    public int getWidth() {
        return width;
    }

    public VisualizeImageContourResponse setWidth(int width) {
        this.width = width;
        return this;
    }

    public int getHeight() {
        return height;
    }

    public VisualizeImageContourResponse setHeight(int height) {
        this.height = height;
        return this;
    }

    public long getBgColor() {
        return bgColor;
    }

    public VisualizeImageContourResponse setBgColor(long bgColor) {
        this.bgColor = bgColor;
        return this;
    }

    public ByteBuffer getImageData() {
        return imageData;
    }

    public VisualizeImageContourResponse setImageData(ByteBuffer imageData) {
        this.imageData = (imageData == null) ? ByteBuffer.wrap(new byte[0]) : imageData;
        return this;
    }

    public ByteBuffer getGridData() {
        return gridData;
    }

    public VisualizeImageContourResponse setGridData(ByteBuffer gridData) {
        this.gridData = (gridData == null) ? ByteBuffer.wrap(new byte[0]) : gridData;
        return this;
    }

    public double getFillN0() {
        return fillN0;
    }

    public VisualizeImageContourResponse setFillN0(double fillN0) {
        this.fillN0 = fillN0;
        return this;
    }

    public double getFillNn() {
        return fillNn;
    }

    public VisualizeImageContourResponse setFillNn(double fillNn) {
        this.fillNn = fillNn;
        return this;
    }

    public double getMinLevel() {
        return minLevel;
    }

    public VisualizeImageContourResponse setMinLevel(double minLevel) {
        this.minLevel = minLevel;
        return this;
    }

    public double getMaxLevel() {
        return maxLevel;
    }

    public VisualizeImageContourResponse setMaxLevel(double maxLevel) {
        this.maxLevel = maxLevel;
        return this;
    }

    public long getSamplesUsed() {
        return samplesUsed;
    }

    public VisualizeImageContourResponse setSamplesUsed(long samplesUsed) {
        this.samplesUsed = samplesUsed;
        return this;
    }

    public Map<String, String> getInfo() {
        return info;
    }

    public VisualizeImageContourResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.width;

            case 1:
                return this.height;

            case 2:
                return this.bgColor;

            case 3:
                return this.imageData;

            case 4:
                return this.gridData;

            case 5:
                return this.fillN0;

            case 6:
                return this.fillNn;

            case 7:
                return this.minLevel;

            case 8:
                return this.maxLevel;

            case 9:
                return this.samplesUsed;

            case 10:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.width = (Integer) value;
                break;

            case 1:
                this.height = (Integer) value;
                break;

            case 2:
                this.bgColor = (Long) value;
                break;

            case 3:
                this.imageData = (ByteBuffer) value;
                break;

            case 4:
                this.gridData = (ByteBuffer) value;
                break;

            case 5:
                this.fillN0 = (Double) value;
                break;

            case 6:
                this.fillNn = (Double) value;
                break;

            case 7:
                this.minLevel = (Double) value;
                break;

            case 8:
                this.maxLevel = (Double) value;
                break;

            case 9:
                this.samplesUsed = (Long) value;
                break;

            case 10:
                this.info = (Map<String, String>) value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if ((obj == null) || (obj.getClass() != this.getClass())) {
            return false;
        }

        VisualizeImageContourResponse that = (VisualizeImageContourResponse) obj;

        return ((this.width == that.width)
                && (this.height == that.height)
                && (this.bgColor == that.bgColor)
                && this.imageData.equals(that.imageData)
                && this.gridData.equals(that.gridData)
                && ((Double) this.fillN0).equals((Double) that.fillN0)
                && ((Double) this.fillNn).equals((Double) that.fillNn)
                && ((Double) this.minLevel).equals((Double) that.minLevel)
                && ((Double) this.maxLevel).equals((Double) that.maxLevel)
                && (this.samplesUsed == that.samplesUsed)
                && this.info.equals(that.info));
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append("{");
        builder.append(gd.toString("width"));
        builder.append(": ");
        builder.append(gd.toString(this.width));
        builder.append(", ");
        builder.append(gd.toString("height"));
        builder.append(": ");
        builder.append(gd.toString(this.height));
        builder.append(", ");
        builder.append(gd.toString("bgColor"));
        builder.append(": ");
        builder.append(gd.toString(this.bgColor));
        builder.append(", ");
        builder.append(gd.toString("imageData"));
        builder.append(": ");
        builder.append(gd.toString(this.imageData));
        builder.append(", ");
        builder.append(gd.toString("gridData"));
        builder.append(": ");
        builder.append(gd.toString(this.gridData));
        builder.append(", ");
        builder.append(gd.toString("fillN0"));
        builder.append(": ");
        builder.append(gd.toString(this.fillN0));
        builder.append(", ");
        builder.append(gd.toString("fillNn"));
        builder.append(": ");
        builder.append(gd.toString(this.fillNn));
        builder.append(", ");
        builder.append(gd.toString("minLevel"));
        builder.append(": ");
        builder.append(gd.toString(this.minLevel));
        builder.append(", ");
        builder.append(gd.toString("maxLevel"));
        builder.append(": ");
        builder.append(gd.toString(this.maxLevel));
        builder.append(", ");
        builder.append(gd.toString("samplesUsed"));
        builder.append(": ");
        builder.append(gd.toString(this.samplesUsed));
        builder.append(", ");
        builder.append(gd.toString("info"));
        builder.append(": ");
        builder.append(gd.toString(this.info));
        builder.append("}");

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.width;
        hashCode = (31 * hashCode) + this.height;
        hashCode = (31 * hashCode) + ((Long) this.bgColor).hashCode();
        hashCode = (31 * hashCode) + this.imageData.hashCode();
        hashCode = (31 * hashCode) + this.gridData.hashCode();
        hashCode = (31 * hashCode) + ((Double) this.fillN0).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.fillNn).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.minLevel).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.maxLevel).hashCode();
        hashCode = (31 * hashCode) + ((Long) this.samplesUsed).hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }


}
