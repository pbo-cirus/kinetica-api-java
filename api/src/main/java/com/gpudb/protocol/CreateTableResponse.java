/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

import java.util.LinkedHashMap;
import java.util.Map;


/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#createTable(CreateTableRequest)}.
 */
public class CreateTableResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateTableResponse")
            .namespace("com.gpudb")
            .fields()
            .name("tableName").type().stringType().noDefault()
            .name("typeId").type().stringType().noDefault()
            .name("isCollection").type().booleanType().noDefault()
            .name("info").type().map().values().stringType().noDefault()
            .endRecord();
    private String tableName;
    private String typeId;
    private boolean isCollection;
    private Map<String, String> info;
    /**
     * Constructs a CreateTableResponse object with default parameters.
     */
    public CreateTableResponse() {
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return the schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * @return Value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * @param tableName Value of {@code tableName}.
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableResponse setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * @return Value of {@code typeId}.
     */
    public String getTypeId() {
        return typeId;
    }

    /**
     * @param typeId Value of {@code typeId}.
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableResponse setTypeId(String typeId) {
        this.typeId = (typeId == null) ? "" : typeId;
        return this;
    }

    /**
     * @return Indicates if the created entity is a collection.
     */
    public boolean getIsCollection() {
        return isCollection;
    }

    /**
     * @param isCollection Indicates if the created entity is a collection.
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableResponse setIsCollection(boolean isCollection) {
        this.isCollection = isCollection;
        return this;
    }

    /**
     * @return Additional information.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * @param info Additional information.
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return the schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index the position of the field to get
     * @return value of the field with the given index.
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.typeId;

            case 2:
                return this.isCollection;

            case 3:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index the position of the field to set
     * @param value the value to set
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String) value;
                break;

            case 1:
                this.typeId = (String) value;
                break;

            case 2:
                this.isCollection = (Boolean) value;
                break;

            case 3:
                this.info = (Map<String, String>) value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if ((obj == null) || (obj.getClass() != this.getClass())) {
            return false;
        }

        CreateTableResponse that = (CreateTableResponse) obj;

        return (this.tableName.equals(that.tableName)
                && this.typeId.equals(that.typeId)
                && (this.isCollection == that.isCollection)
                && this.info.equals(that.info));
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append("{");
        builder.append(gd.toString("tableName"));
        builder.append(": ");
        builder.append(gd.toString(this.tableName));
        builder.append(", ");
        builder.append(gd.toString("typeId"));
        builder.append(": ");
        builder.append(gd.toString(this.typeId));
        builder.append(", ");
        builder.append(gd.toString("isCollection"));
        builder.append(": ");
        builder.append(gd.toString(this.isCollection));
        builder.append(", ");
        builder.append(gd.toString("info"));
        builder.append(": ");
        builder.append(gd.toString(this.info));
        builder.append("}");

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.typeId.hashCode();
        hashCode = (31 * hashCode) + ((Boolean) this.isCollection).hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }

}
