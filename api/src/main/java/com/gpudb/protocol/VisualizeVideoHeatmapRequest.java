
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;


public class VisualizeVideoHeatmapRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeVideoHeatmapRequest")
            .namespace("com.gpudb")
            .fields()
            .name("tableNames").type().array().items().stringType().noDefault()
            .name("xColumnName").type().stringType().noDefault()
            .name("yColumnName").type().stringType().noDefault()
            .name("minX").type().doubleType().noDefault()
            .name("maxX").type().doubleType().noDefault()
            .name("minY").type().doubleType().noDefault()
            .name("maxY").type().doubleType().noDefault()
            .name("timeIntervals").type().array().items().array().items().doubleType().noDefault()
            .name("width").type().intType().noDefault()
            .name("height").type().intType().noDefault()
            .name("projection").type().stringType().noDefault()
            .name("videoStyle").type().stringType().noDefault()
            .name("sessionKey").type().stringType().noDefault()
            .name("styleOptions").type().map().values().stringType().noDefault()
            .name("options").type().map().values().stringType().noDefault()
            .endRecord();
    private List<String> tableNames;
    private String xColumnName;
    private String yColumnName;
    private double minX;
    private double maxX;
    private double minY;
    private double maxY;
    private List<List<Double>> timeIntervals;
    private int width;
    private int height;
    private String projection;
    private String videoStyle;
    private String sessionKey;
    private Map<String, String> styleOptions;
    private Map<String, String> options;
    public VisualizeVideoHeatmapRequest() {
        tableNames = new ArrayList<>();
        xColumnName = "";
        yColumnName = "";
        timeIntervals = new ArrayList<>();
        projection = "";
        videoStyle = "";
        sessionKey = "";
        styleOptions = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }
    public VisualizeVideoHeatmapRequest(List<String> tableNames, String xColumnName, String yColumnName, double minX, double maxX, double minY, double maxY, List<List<Double>> timeIntervals, int width, int height, String projection, String videoStyle, String sessionKey, Map<String, String> styleOptions, Map<String, String> options) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.xColumnName = (xColumnName == null) ? "" : xColumnName;
        this.yColumnName = (yColumnName == null) ? "" : yColumnName;
        this.minX = minX;
        this.maxX = maxX;
        this.minY = minY;
        this.maxY = maxY;
        this.timeIntervals = (timeIntervals == null) ? new ArrayList<List<Double>>() : timeIntervals;
        this.width = width;
        this.height = height;
        this.projection = (projection == null) ? "" : projection;
        this.videoStyle = (videoStyle == null) ? "" : videoStyle;
        this.sessionKey = (sessionKey == null) ? "" : sessionKey;
        this.styleOptions = (styleOptions == null) ? new LinkedHashMap<String, String>() : styleOptions;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public static Schema getClassSchema() {
        return schema$;
    }

    public List<String> getTableNames() {
        return tableNames;
    }

    public VisualizeVideoHeatmapRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    public String getXColumnName() {
        return xColumnName;
    }

    public VisualizeVideoHeatmapRequest setXColumnName(String xColumnName) {
        this.xColumnName = (xColumnName == null) ? "" : xColumnName;
        return this;
    }

    public String getYColumnName() {
        return yColumnName;
    }

    public VisualizeVideoHeatmapRequest setYColumnName(String yColumnName) {
        this.yColumnName = (yColumnName == null) ? "" : yColumnName;
        return this;
    }

    public double getMinX() {
        return minX;
    }

    public VisualizeVideoHeatmapRequest setMinX(double minX) {
        this.minX = minX;
        return this;
    }

    public double getMaxX() {
        return maxX;
    }

    public VisualizeVideoHeatmapRequest setMaxX(double maxX) {
        this.maxX = maxX;
        return this;
    }

    public double getMinY() {
        return minY;
    }

    public VisualizeVideoHeatmapRequest setMinY(double minY) {
        this.minY = minY;
        return this;
    }

    public double getMaxY() {
        return maxY;
    }

    public VisualizeVideoHeatmapRequest setMaxY(double maxY) {
        this.maxY = maxY;
        return this;
    }

    public List<List<Double>> getTimeIntervals() {
        return timeIntervals;
    }

    public VisualizeVideoHeatmapRequest setTimeIntervals(List<List<Double>> timeIntervals) {
        this.timeIntervals = (timeIntervals == null) ? new ArrayList<List<Double>>() : timeIntervals;
        return this;
    }

    public int getWidth() {
        return width;
    }

    public VisualizeVideoHeatmapRequest setWidth(int width) {
        this.width = width;
        return this;
    }

    public int getHeight() {
        return height;
    }

    public VisualizeVideoHeatmapRequest setHeight(int height) {
        this.height = height;
        return this;
    }

    public String getProjection() {
        return projection;
    }

    public VisualizeVideoHeatmapRequest setProjection(String projection) {
        this.projection = (projection == null) ? "" : projection;
        return this;
    }

    public String getVideoStyle() {
        return videoStyle;
    }

    public VisualizeVideoHeatmapRequest setVideoStyle(String videoStyle) {
        this.videoStyle = (videoStyle == null) ? "" : videoStyle;
        return this;
    }

    public String getSessionKey() {
        return sessionKey;
    }

    public VisualizeVideoHeatmapRequest setSessionKey(String sessionKey) {
        this.sessionKey = (sessionKey == null) ? "" : sessionKey;
        return this;
    }

    public Map<String, String> getStyleOptions() {
        return styleOptions;
    }

    public VisualizeVideoHeatmapRequest setStyleOptions(Map<String, String> styleOptions) {
        this.styleOptions = (styleOptions == null) ? new LinkedHashMap<String, String>() : styleOptions;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public VisualizeVideoHeatmapRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableNames;

            case 1:
                return this.xColumnName;

            case 2:
                return this.yColumnName;

            case 3:
                return this.minX;

            case 4:
                return this.maxX;

            case 5:
                return this.minY;

            case 6:
                return this.maxY;

            case 7:
                return this.timeIntervals;

            case 8:
                return this.width;

            case 9:
                return this.height;

            case 10:
                return this.projection;

            case 11:
                return this.videoStyle;

            case 12:
                return this.sessionKey;

            case 13:
                return this.styleOptions;

            case 14:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableNames = (List<String>) value;
                break;

            case 1:
                this.xColumnName = (String) value;
                break;

            case 2:
                this.yColumnName = (String) value;
                break;

            case 3:
                this.minX = (Double) value;
                break;

            case 4:
                this.maxX = (Double) value;
                break;

            case 5:
                this.minY = (Double) value;
                break;

            case 6:
                this.maxY = (Double) value;
                break;

            case 7:
                this.timeIntervals = (List<List<Double>>) value;
                break;

            case 8:
                this.width = (Integer) value;
                break;

            case 9:
                this.height = (Integer) value;
                break;

            case 10:
                this.projection = (String) value;
                break;

            case 11:
                this.videoStyle = (String) value;
                break;

            case 12:
                this.sessionKey = (String) value;
                break;

            case 13:
                this.styleOptions = (Map<String, String>) value;
                break;

            case 14:
                this.options = (Map<String, String>) value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if ((obj == null) || (obj.getClass() != this.getClass())) {
            return false;
        }

        VisualizeVideoHeatmapRequest that = (VisualizeVideoHeatmapRequest) obj;

        return (this.tableNames.equals(that.tableNames)
                && this.xColumnName.equals(that.xColumnName)
                && this.yColumnName.equals(that.yColumnName)
                && ((Double) this.minX).equals((Double) that.minX)
                && ((Double) this.maxX).equals((Double) that.maxX)
                && ((Double) this.minY).equals((Double) that.minY)
                && ((Double) this.maxY).equals((Double) that.maxY)
                && this.timeIntervals.equals(that.timeIntervals)
                && (this.width == that.width)
                && (this.height == that.height)
                && this.projection.equals(that.projection)
                && this.videoStyle.equals(that.videoStyle)
                && this.sessionKey.equals(that.sessionKey)
                && this.styleOptions.equals(that.styleOptions)
                && this.options.equals(that.options));
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append("{");
        builder.append(gd.toString("tableNames"));
        builder.append(": ");
        builder.append(gd.toString(this.tableNames));
        builder.append(", ");
        builder.append(gd.toString("xColumnName"));
        builder.append(": ");
        builder.append(gd.toString(this.xColumnName));
        builder.append(", ");
        builder.append(gd.toString("yColumnName"));
        builder.append(": ");
        builder.append(gd.toString(this.yColumnName));
        builder.append(", ");
        builder.append(gd.toString("minX"));
        builder.append(": ");
        builder.append(gd.toString(this.minX));
        builder.append(", ");
        builder.append(gd.toString("maxX"));
        builder.append(": ");
        builder.append(gd.toString(this.maxX));
        builder.append(", ");
        builder.append(gd.toString("minY"));
        builder.append(": ");
        builder.append(gd.toString(this.minY));
        builder.append(", ");
        builder.append(gd.toString("maxY"));
        builder.append(": ");
        builder.append(gd.toString(this.maxY));
        builder.append(", ");
        builder.append(gd.toString("timeIntervals"));
        builder.append(": ");
        builder.append(gd.toString(this.timeIntervals));
        builder.append(", ");
        builder.append(gd.toString("width"));
        builder.append(": ");
        builder.append(gd.toString(this.width));
        builder.append(", ");
        builder.append(gd.toString("height"));
        builder.append(": ");
        builder.append(gd.toString(this.height));
        builder.append(", ");
        builder.append(gd.toString("projection"));
        builder.append(": ");
        builder.append(gd.toString(this.projection));
        builder.append(", ");
        builder.append(gd.toString("videoStyle"));
        builder.append(": ");
        builder.append(gd.toString(this.videoStyle));
        builder.append(", ");
        builder.append(gd.toString("sessionKey"));
        builder.append(": ");
        builder.append(gd.toString(this.sessionKey));
        builder.append(", ");
        builder.append(gd.toString("styleOptions"));
        builder.append(": ");
        builder.append(gd.toString(this.styleOptions));
        builder.append(", ");
        builder.append(gd.toString("options"));
        builder.append(": ");
        builder.append(gd.toString(this.options));
        builder.append("}");

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.xColumnName.hashCode();
        hashCode = (31 * hashCode) + this.yColumnName.hashCode();
        hashCode = (31 * hashCode) + ((Double) this.minX).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.maxX).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.minY).hashCode();
        hashCode = (31 * hashCode) + ((Double) this.maxY).hashCode();
        hashCode = (31 * hashCode) + this.timeIntervals.hashCode();
        hashCode = (31 * hashCode) + this.width;
        hashCode = (31 * hashCode) + this.height;
        hashCode = (31 * hashCode) + this.projection.hashCode();
        hashCode = (31 * hashCode) + this.videoStyle.hashCode();
        hashCode = (31 * hashCode) + this.sessionKey.hashCode();
        hashCode = (31 * hashCode) + this.styleOptions.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

    public static final class Projection {

        public static final String EPSG_4326 = "EPSG:4326";

        public static final String PLATE_CARREE = "PLATE_CARREE";

        public static final String _900913 = "900913";

        public static final String EPSG_900913 = "EPSG:900913";

        public static final String _102100 = "102100";

        public static final String EPSG_102100 = "EPSG:102100";

        public static final String _3857 = "3857";

        public static final String EPSG_3857 = "EPSG:3857";

        public static final String WEB_MERCATOR = "WEB_MERCATOR";


        private Projection() {
        }
    }

    public static final class StyleOptions {

        public static final String COLORMAP = "colormap";

        public static final String JET = "jet";

        public static final String HOT = "hot";

        public static final String HSV = "hsv";

        public static final String GRAY = "gray";

        public static final String BLUES = "blues";

        public static final String GREENS = "greens";

        public static final String GREYS = "greys";

        public static final String ORANGES = "oranges";

        public static final String PURPLES = "purples";

        public static final String REDS = "reds";

        public static final String BLUR_RADIUS = "blur_radius";

        public static final String BG_COLOR = "bg_color";

        public static final String GRADIENT_START_COLOR = "gradient_start_color";

        public static final String GRADIENT_END_COLOR = "gradient_end_color";


        private StyleOptions() {
        }
    }


}
